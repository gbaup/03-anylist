# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  fullName: String!
  email: String!
  roles: [String!]!
  isActive: Boolean!
  items: [Item!]!
}

type Item {
  id: ID!
  nroreclamo: Int!
  titulo: String!
  descripcion: String!
  detalleCompraCSV: String!
  pendiente: Boolean!
  user: User!
  image: String
}

type ItemResponse {
  id: ID!
  nroreclamo: Int!
  titulo: String!
  descripcion: String!
  detalleCompraCSV: String!
  estado: String!
  image: String
}

type AuthResponse {
  token: String!
  user: User!
}

type Query {
  """
  Permite traer los reclamos asociados al usuario loggeado. En caso de ser admin, devuelve todos los reclamos. Tener en cuenta que naturalmente devuelve aquellos relcamos que figuran como "pendientes". En caso de querer que devuelva TODOS los reclamos, se debe agregar la variable - "estado": "todos". Se puede implementar paginacion con los valores offset y limit.
  """
  allReclamos(estado: String = "pendiente", offset: Int = 0, limit: Int = 5): [ItemResponse!]!

  """
  Busca reclamos por "nroreclamo" asociados a ese usuario. En caso de ser admin, busca entre todos los reclamos.
  """
  oneReclamo(nroreclamo: Int!): Item!

  """
  Exclusivo para admin. Busca entre todos los reclamos por palabra que contenga el titulo.
  """
  manyReclamos(term: String!, offset: Int = 0, limit: Int = 5): [ItemResponse!]!

  """Exclusivo para admin. Trae todos los usuarios registrados."""
  allUsers(roles: [ValidRoles!] = []): [User!]!

  """Exclusivo para admin. Busca usuario por su id"""
  userById(id: ID!): User!

  """Exclusivo para admin. Busca usuario por email."""
  userByEmail(email: String!): User!
  revalidate: AuthResponse!
}

enum ValidRoles {
  admin
  user
}

type Mutation {
  crearReclamo(createItemInput: CreateItemInput!): Item!
  updateItem(updateItemInput: UpdateItemInput!, nroreclamo: Int!): Item!

  """
  Exclusivo para admin. Permite marcar un reclamo como "resuelto" ingresando el nroreclamo
  """
  removeReclamo(nroreclamo: Int!): String!

  """Exclusivo para admin. Marca como "inactivo" un usuario"""
  blockUser(id: ID!): User!
  signup(signUpInput: SignUpInput!): AuthResponse!
  login(loginInput: LoginInput!): AuthResponse!

  """
  Ejecuta la construcci√≥n de la base de datos. Opcionalmente, se pueden cargar items adicionales asignando "true" a la variable "loadAdditionalItems". 
  """
  seed(loadAdditionalItems: Boolean! = false): Boolean!
}

input CreateItemInput {
  titulo: String!
  descripcion: String!
  date: String!
  nrofactura: Int!
  nroproducto: Int!
}

input UpdateItemInput {
  titulo: String
  descripcion: String
  date: String
  nrofactura: Int
  nroproducto: Int
}

input SignUpInput {
  fullName: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}